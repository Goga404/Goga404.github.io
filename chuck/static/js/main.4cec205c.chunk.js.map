{"version":3,"sources":["components/Navbar.js","components/Blogs.js","components/CategoryNav.js","components/Index.js","components/FormContent.js","actions/chuckActions.js","App.js","serviceWorker.js","store/store.js","index.js"],"names":["Navbar","title","to","Blogs","state","blog","category","props","match","params","getContent","a","async","url","fetch","response","ok","json","setState","value","console","error","status","this","className","onClick","Component","CatNav","Index","name","surname","connect","store","age","ContentForm","changeData","e","updateInfo","target","submit","preventDefault","log","onSubmit","type","onChange","placeholder","dispatch","prop","val","setName","setSurname","setAge","App","path","component","Boolean","window","location","hostname","initState","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cec205c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom'\r\n// import { connect } from 'react-redux';\r\n\r\n// UI function component (function-based instead of class)\r\nconst Navbar = ({title}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<nav>\r\n        \t\t<ul>\r\n        \t\t\t<li>\r\n        \t\t\t\t<NavLink to=\"/home\">Home</NavLink>\r\n        \t\t\t</li>\r\n        \t\t\t<li>\r\n        \t\t\t\t<NavLink to=\"/blog/random\">Blog</NavLink>\r\n        \t\t\t</li>\r\n        \t\t\t<li>\r\n        \t\t\t\t<NavLink to=\"/edit\">Edit</NavLink>\r\n        \t\t\t</li>\r\n        \t\t</ul>\r\n        \t</nav>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Navbar;","import React, {Component} from 'react';\t\r\n// import { connect } from 'react-redux';\r\n\r\n// UI function component (function-based instead of class)\r\nclass Blogs extends Component {\r\n\tstate = {\r\n\t\tblog: null,\r\n\t\tcategory: this.props.match.params.category\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tthis.getContent()\r\n\t}\r\n\tgetContent = async () => {\r\n\t\tlet { category } = this.state\r\n\t\tlet url = category ? `https://api.chucknorris.io/jokes/random?category=${category}` : 'https://api.chucknorris.io/jokes/random'\r\n\t\tlet response = await fetch(url)\r\n\t\tif (response.ok) { // если HTTP-статус в диапазоне 200-299\r\n\t\t  // получаем тело ответа (см. про этот метод ниже)\r\n\t\t  let json = await response.json();\r\n\r\n\t\t  this.setState({\r\n\t\t  \tblog: json.value\r\n\t\t  })\r\n\t\t} else {\r\n\t\t  console.error(\"Ошибка HTTP: \" + response.status);\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\tconst { blog, category } = this.state\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h3>Blogs page {category ? `- ${category}` : ''}</h3>\r\n\t\t\t\t<p className=\"txt_content my-20\">\r\n\t\t\t\t\t{blog}\r\n\t\t\t\t</p>\r\n\t\t\t\t<button className='main_btn' onClick={this.getContent}>Get another one!</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Blogs;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom'\r\n// import { connect } from 'react-redux';\r\n\r\n// UI function component (function-based instead of class)\r\nconst CatNav = ({title}) => {\r\n  return (\r\n    <div>\r\n      <nav className=\"cat_menu\">\r\n        <NavLink to=\"/category/music\">Music</NavLink>\r\n        <NavLink to=\"/category/movie\">Movie</NavLink>\r\n        <NavLink to=\"/category/dev\">Dev</NavLink>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CatNav;","import React, {Component} from 'react';\t\r\nimport { connect } from 'react-redux';\r\n\r\nimport CatNav from './CategoryNav'\r\n// UI function component (function-based instead of class)\r\nclass Index extends Component {\r\n\trender(){\r\n\t\tconst { name, surname } = this.props\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t\t<h3>{name} {surname} jokes</h3>\r\n\t        <h4>Select category:</h4>\r\n\t        <CatNav />\r\n\t    </div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n\treturn {\r\n\t\tname: store.name,\r\n\t\tsurname: store.surname,\r\n\t\tage: store.age\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps)(Index);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setName, setSurname, setAge } from './../actions/chuckActions.js'\r\n\r\nclass ContentForm extends Component {\r\n\tchangeData = e => {\r\n\t\tconst { updateInfo } = this.props\r\n\t\tconst prop = e.target.name\r\n\t\tconst val = e.target.value\r\n\t\t// dispatch\r\n\t\tupdateInfo(prop, val)\r\n\t}\r\n\tsubmit = e => {\r\n\t\te.preventDefault()\r\n\t\tconsole.log(this.state)\r\n\t}\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h3>Edit info:</h3>\r\n\t\t\t\t<form className=\"suctomForm\" onSubmit={this.submit}>\r\n\t\t\t\t\t<label className=\"suctomLabel\">\r\n\t\t\t\t\t\t<span>Name:</span>\r\n            <input type=\"text\" name='name' onChange={this.changeData} placeholder={this.props.name}/>\t\t\t\t\r\n\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t<label className=\"suctomLabel\">\r\n\t\t\t\t\t\t<span>Surname:</span>\r\n            <input type=\"text\" name='surname' onChange={this.changeData} placeholder={this.props.surname}/>\t\t\t\t\r\n\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t<label className=\"suctomLabel\">\r\n\t\t\t\t\t\t<span>Age:</span>\r\n            <input type=\"text\" name='age' onChange={this.changeData}  placeholder={this.props.age}/>\t\t\t\t\r\n\t\t\t\t\t</label>\r\n\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n\treturn {\r\n\t\tname: store.name,\r\n\t\tsurname: store.surname,\r\n\t\tage: store.age\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tupdateInfo: (prop, val) => {\r\n\t\t\tswitch(prop) {\r\n\t\t\t  case 'name':\r\n\t\t\t\t\tdispatch(setName(val))\r\n\t\t\t    break;\r\n\r\n\t\t\t  case 'surname':\r\n\t\t\t\t\tdispatch(setSurname(val))\r\n\t\t\t    break;\r\n\r\n\t\t    case 'age':\r\n\t\t\t\t\tdispatch(setAge(val))\r\n\t\t\t    break;\r\n\r\n\t\t\t  default:\r\n\t\t\t  \treturn\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContentForm);","export const setName = val => {\r\n\treturn {type: \"SET_NAME\", name: val}\r\n}\r\n\r\nexport const setSurname = val => {\r\n\treturn {type: \"SET_SURNAME\", surname: val}\r\n}\r\n\r\nexport const setAge = val => {\r\n\treturn {type: \"SET_AGE\", age: val}\r\n}","import React, {Component} from 'react';\n// import { connect } from 'react-redux';\nimport './App.css';\n// router\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n// //router\n// components\nimport Navbar from './components/Navbar'\nimport Blogs from './components/Blogs'\nimport Index from './components/Index'\nimport ContentForm from './components/FormContent'\n// //components\n\nclass App extends Component {\n\trender(){\n\t\treturn (\n\t\t\t<BrowserRouter>\n\t\t    <div className=\"App\">\n\t\t      <header className=\"App-header\">\n\t\t      \t<Navbar />\n\t\t      </header>\n\t\t\t\t\t<Switch>\n\t\t      \t<Route path=\"/home\" component={Index} />\n\t\t      \t<Route path=\"/blog/random\" component={Blogs} />\n\t\t      \t<Route path=\"/category/:category\" component={Blogs} />\n\t\t      \t<Route path=\"/edit\" component={ContentForm} />\n\t\t\t\t\t</Switch>\n\t\t    </div>\n\t    </BrowserRouter>\n\t  );\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from 'redux'\r\n\r\nconst initState = {\r\n\tname: \"Chuck\",\r\n\tsurname: \"Norris\",\r\n\tage: \"79\"\r\n}\r\n\r\n// actions:\r\n// const setName = {type: \"SET_NAME\", name: \"Chuck\"}\r\n// const setAge = {type: \"SET_AGE\", age: \"79\"}\r\n\r\nconst customReducer = (state = initState, action) => {\r\n\t// console.log(state, action)\r\n\tif (action.type === \"SET_NAME\") {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tname: action.name\r\n\t\t}\r\n\t}\r\n\r\n\telse if (action.type === \"SET_SURNAME\") {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tsurname: action.surname\r\n\t\t}\r\n\t}\r\n\r\n\telse if (action.type === \"SET_AGE\") {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tage: action.age\r\n\t\t}\r\n\t}\r\n\r\n\telse return state\r\n}\r\n\r\nconst store = createStore(customReducer)\r\n\r\n// store.dispatch(setAge)\r\n// store.dispatch(setName)\r\n\r\nexport {store}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport { store } from './store/store'\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n\t);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}